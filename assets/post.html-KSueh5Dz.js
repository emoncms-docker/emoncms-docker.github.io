import{_ as n,o as s,c as a,e as t}from"./app-Vwyt7zSC.js";const p="/assets/MQTTpost-DvWn5sPQ.png",o={},e=t(`<h1 id="post-datas-to-the-broker" tabindex="-1"><a class="header-anchor" href="#post-datas-to-the-broker"><span>post datas to the broker</span></a></h1><p>supposing the IP of the machine running emoncms docker to be <code>192.168.1.53</code>, you can post datas from your local network :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mosquitto_pub <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.1.53 <span class="token parameter variable">-p</span> <span class="token number">7883</span> <span class="token parameter variable">-u</span> <span class="token string">&quot;emonpi&quot;</span> <span class="token parameter variable">-P</span> <span class="token string">&quot;emonpimqtt2016&quot;</span> <span class="token parameter variable">-t</span> <span class="token string">&#39;emon/test/t3&#39;</span> <span class="token parameter variable">-m</span> <span class="token number">43.67</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+`" alt=""></p><p>if you dont have mosquitto_pub installed and are on debian/ubuntu : <code>sudo apt-get install mosquitto-clients</code></p><h2 id="use-a-python-code" tabindex="-1"><a class="header-anchor" href="#use-a-python-code"><span>use a python code</span></a></h2><p>Install the paho mqtt library : <code>python3 -m pip install paho-mqtt</code></p><p>Save the following code as <code>test.py</code> :</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;MQTT post&quot;&quot;&quot;</span>
<span class="token keyword">import</span> json
<span class="token keyword">import</span> os
<span class="token keyword">import</span> time
<span class="token keyword">import</span> paho<span class="token punctuation">.</span>mqtt<span class="token punctuation">.</span>client <span class="token keyword">as</span> mqtt

MQTT_USER <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;MQTT_USER&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;emonpi&quot;</span><span class="token punctuation">)</span>
MQTT_PASSWORD <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;MQTT_PASSWORD&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;emonpimqtt2016&quot;</span><span class="token punctuation">)</span>
MQTT_HOST <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;MQTT_HOST&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
MQTT_PORT <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;MQTT_PORT&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&quot;1883&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">on_connect</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> reason_code<span class="token punctuation">,</span> propreties<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># pylint: disable=unused-argument</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;detect the broker response to the connection request&quot;&quot;&quot;</span>
    client<span class="token punctuation">.</span>connection <span class="token operator">=</span> <span class="token boolean">True</span>

mqtt<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>connection <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">def</span> <span class="token function">publish_to_mqtt</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;connect to the broker and send a json payload&quot;&quot;&quot;</span>
    message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    message<span class="token punctuation">[</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    mqttc <span class="token operator">=</span> mqtt<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>mqtt<span class="token punctuation">.</span>CallbackAPIVersion<span class="token punctuation">.</span>VERSION2<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>username_pw_set<span class="token punctuation">(</span>MQTT_USER<span class="token punctuation">,</span> password<span class="token operator">=</span>MQTT_PASSWORD<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>on_connect <span class="token operator">=</span> on_connect
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        mqttc<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>MQTT_HOST<span class="token punctuation">,</span> port<span class="token operator">=</span>MQTT_PORT<span class="token punctuation">,</span> keepalive<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        message<span class="token punctuation">[</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        message<span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;Could not connect to MQTT </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        mqttc<span class="token punctuation">.</span>loop_start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token keyword">not</span> mqttc<span class="token punctuation">.</span>connection <span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> mqttc<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;emon/</span><span class="token interpolation"><span class="token punctuation">{</span>node<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">:</span>
            message<span class="token punctuation">[</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        mqttc<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>
        message<span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> mqtt<span class="token punctuation">.</span>connack_string<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> message

message <span class="token operator">=</span> publish_to_mqtt<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;t3&quot;</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The above code requires version 2.0 of paho-mqtt !</p></div>`,10),c=[e];function l(u,i){return s(),a("div",null,c)}const k=n(o,[["render",l],["__file","post.html.vue"]]),d=JSON.parse('{"path":"/setup/post","title":"posting to MQTT","lang":"en-US","frontmatter":{"title":"posting to MQTT","permalink":"/setup/post"},"headers":[{"level":2,"title":"use a python code","slug":"use-a-python-code","link":"#use-a-python-code","children":[]}],"git":{},"filePathRelative":"setup/post.md"}');export{k as comp,d as data};
