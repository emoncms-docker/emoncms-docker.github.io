import{_ as s,r as t,o,c as i,a as n,b as e,d as l,e as c}from"./app-DuHxEMiH.js";const p={},r=n("h1",{id:"running-the-app-with-docker-compose",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#running-the-app-with-docker-compose"},[n("span",null,"Running the App with docker-compose")])],-1),d={class:"custom-container tip"},u=n("p",{class:"custom-container-title"},"TIP",-1),m={href:"https://github.com/docker/compose",target:"_blank",rel:"noopener noreferrer"},h=n("ul",null,[n("li",null,[e("download a binary and rename it "),n("code",null,"docker-compose")]),n("li",null,[e("make it executable through "),n("code",null,"chmod +x docker-compose"),e(" and move it to your "),n("code",null,"/bin"),e(" folder with "),n("code",null,"sudo mv docker-compose /bin")])],-1),v=c(`<p>Create a <code>docker-compose.yml</code> file:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">emoncms</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> alexjunk/emoncms<span class="token punctuation">:</span>alpine3.18_emoncms11.4.11
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /data<span class="token punctuation">:</span>/data
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Europe/Paris
      <span class="token punctuation">-</span> REDIS_BUFFER=1 <span class="token comment"># 0 to disable low-write mode</span>
      <span class="token punctuation">-</span> EMONCMS_LOG_LEVEL=2 <span class="token comment"># 1=INFO, 2=WARN, 3=ERROR</span>
      <span class="token punctuation">-</span> MYSQL_DATABASE=emoncms
      <span class="token punctuation">-</span> MYSQL_USER=emoncms
      <span class="token punctuation">-</span> MYSQL_PASSWORD=emonpiemoncmsmysql2016
      <span class="token punctuation">-</span> MQTT_USER=emonpi
      <span class="token punctuation">-</span> MQTT_PASSWORD=emonpimqtt2016
      <span class="token punctuation">-</span> MQTT_HOST=localhost
      <span class="token punctuation">-</span> MQTT_LOG_LEVEL=error
      <span class="token punctuation">-</span> CRT_FILE=/etc/ssl/apache2/server.pem
      <span class="token punctuation">-</span> KEY_FILE=/etc/ssl/apache2/server.key
      <span class="token punctuation">-</span> CNAME=localhost
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
       <span class="token comment"># These ports are in format &lt;host-port&gt;:&lt;container-port&gt;</span>
      <span class="token punctuation">-</span> 7443<span class="token punctuation">:</span><span class="token number">443</span> <span class="token comment"># Public HTTPS Port </span>
      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">80</span> <span class="token comment"># Public HTTP Port</span>
      <span class="token punctuation">-</span> 9883<span class="token punctuation">:</span><span class="token number">1883</span> <span class="token comment"># Public MQTT Port (if using the internal broker)</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you are happy with your compose file :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="persist-your-data" tabindex="-1"><a class="header-anchor" href="#persist-your-data"><span>persist your data</span></a></h2><p>For persistent datas, create a folder named <code>data</code> at the root of the host.</p><p>If you just want an ephemeral test without persistent datas, remove the <code>/data</code> volume in the compose file.</p><h2 id="mysql-configuration" tabindex="-1"><a class="header-anchor" href="#mysql-configuration"><span>mysql configuration</span></a></h2><p>The mysql database is used to store metadatas.</p><p>Adjust <code>MYSQL_USER</code> and <code>MYSQL_PASSWORD</code> to the custom values of your taste.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Please note you can only do that at the creation of the mariadb database.</p></div><h2 id="mqtt" tabindex="-1"><a class="header-anchor" href="#mqtt"><span>MQTT</span></a></h2><p>You can change the broker credentials and its IP/address when you want.</p><p><code>MQTT_LOG_LEVEL</code> possible values :</p><ul><li>error</li><li>warning</li><li>information</li><li>notice</li><li>all</li></ul><p>You can add more than one log level like that :</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MQTT_LOG_LEVEL=&quot;error warning information notice&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Using an external broker is possible only if listening on port <code>1883</code></p></div><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>https</span></a></h2><p>Map a volume to a folder on the host including your customized credentials</p><p>Modify the env vars <code>CRT_FILE</code> and <code>KEY_FILE</code> with the path to the customized credentials</p>`,21);function k(b,_){const a=t("ExternalLinkIcon");return o(),i("div",null,[r,n("div",d,[u,n("p",null,[e("to install "),n("a",m,[e("docker-compose"),l(a)])]),h]),v])}const y=s(p,[["render",k],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/setup/","title":"Running the App with docker-compose","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"persist your data","slug":"persist-your-data","link":"#persist-your-data","children":[]},{"level":2,"title":"mysql configuration","slug":"mysql-configuration","link":"#mysql-configuration","children":[]},{"level":2,"title":"MQTT","slug":"mqtt","link":"#mqtt","children":[]},{"level":2,"title":"https","slug":"https","link":"#https","children":[]}],"git":{},"filePathRelative":"setup/README.md"}');export{y as comp,f as data};
